#!/usr/bin/env python
# this line is just used to define the type of document

import rospy

import numpy

# node will publish motor speeds
from mav_msgs.msg import Actuators

#node will subscribe to odometry measurements
from nav_msgs.msg import Odometry


from VectorThrustController import Vector_Thrust_Controller

from LoadTransportController import Load_Transport_Controller

import time

from numpy import cos as c
from numpy import sin as s

#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#
# For computing velocity from position measurements

class Median_Filter():
    # N is order of median filter
    def __init__(self, N):
        self.N = N
        self.data = numpy.zeros(N)
    
    def update_data(self,new_data):
        N = self.N
        self.data[:-1] = self.data[1:]
        self.data[-1]  = new_data

    def output(self):
        return numpy.median(self.data)

    def up_and_out(self,new_data):
        self.update_data(new_data)
        return self.output()

class Median_Filter_3D():
    # N is order of median filter
    def __init__(self, N):
        self.N = N
        self.Dx =  Median_Filter(N)
        self.Dy =  Median_Filter(N)
        self.Dz =  Median_Filter(N)

    def up_and_out(self,new_data):
        Dx_new = self.Dx.up_and_out(new_data[0])
        Dy_new = self.Dy.up_and_out(new_data[1])
        Dz_new = self.Dz.up_and_out(new_data[2])
        return numpy.array([Dx_new,Dy_new,Dz_new])


class Velocity_Filter():
    def __init__(self,N,old_position,old_time):
        self.median_filter = Median_Filter_3D(N)
        self.old_position = old_position
        self.old_time = old_time

    def out(self,new_position,new_time):
        dt = new_time - self.old_time
        vel_estimate =  (new_position - self.old_position)/dt
        self.old_position = new_position
        self.old_time = new_time
        out = self.median_filter.up_and_out(vel_estimate)

        return out


#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#



# Desired trajectory for LOAD
def traj_des(t):


    r = 0.0
    w = 2*3.14/30.0

    pp = r*w**0*numpy.array([ c(w*t), s(w*t),0.0]);
    vv = r*w**1*numpy.array([-s(w*t), c(w*t),0.0]);
    aa = r*w**2*numpy.array([-c(w*t),-s(w*t),0.0]);
    jj = r*w**3*numpy.array([ s(w*t),-c(w*t),0.0]);
    ss = r*w**4*numpy.array([ c(w*t), s(w*t),0.0]);

    pp = pp + numpy.array([0.0,0.0,0.01])


    return numpy.concatenate([pp,vv,aa,jj,ss])


# # Desired trajectory for LOAD
# def traj_des(t):

#     if t <= 0.0:

#         r = 1.0
#         w = 2*3.14/20.0

#         pp = r*w**0*numpy.array([ c(w*t), s(w*t),0.0]);
#         vv = r*w**1*numpy.array([-s(w*t), c(w*t),0.0]);
#         aa = r*w**2*numpy.array([-c(w*t),-s(w*t),0.0]);
#         jj = r*w**3*numpy.array([ s(w*t),-c(w*t),0.0]);
#         ss = r*w**4*numpy.array([ c(w*t), s(w*t),0.0]);

#         pp = pp + numpy.array([0.0,0.0,0.01])

#     else:

#         pp = numpy.array([0.0,0.0,0.01]);
#         vv = numpy.array([0.0,0.0,0.0 ]);
#         aa = numpy.array([0.0,0.0,0.0 ]);
#         jj = numpy.array([0.0,0.0,0.0 ]);
#         ss = numpy.array([0.0,0.0,0.0 ]);

#     return numpy.concatenate([pp,vv,aa,jj,ss])

# # Desired trajectory for LOAD
# def traj_des(t):

#     T = 20.0
    
#     if t <= T/2:

#         Delta = 5.0
#         w     = 2*3.14/T

#         pp = numpy.array([ -0.5*Delta*(w**0)*(c(w*t) - 1.0),0.0,0.0]);
#         vv = numpy.array([  0.5*Delta*(w**1)*s(w*t)     ,0.0,0.0]);
#         aa = numpy.array([  0.5*Delta*(w**2)*c(w*t)     ,0.0,0.0]);
#         jj = numpy.array([ -0.5*Delta*(w**3)*s(w*t)     ,0.0,0.0]);
#         ss = numpy.array([ -0.5*Delta*(w**4)*c(w*t)     ,0.0,0.0]);

#         pp = pp + numpy.array([-Delta,0.0,0.01])
#         pp = pp + numpy.array([0.0,0.0,0.01])

#     else:

#         pp = numpy.array([0.0,0.0,0.0 ]);
#         vv = numpy.array([0.0,0.0,0.0 ]);
#         aa = numpy.array([0.0,0.0,0.0 ]);
#         jj = numpy.array([0.0,0.0,0.0 ]);
#         ss = numpy.array([0.0,0.0,0.0 ]);

#     return numpy.concatenate([pp,vv,aa,jj,ss])


# # Desired trajectory for LOAD
# def traj_des2(t,pp_real,vv_real,aa_real,jj_real,ss_real):


#     pp_final,vv_final,aa_final,jj_final,ss_final
#     if t <= 0.0:

#         r = 1.0
#         w = 2*3.14/10.0

#         pp = r*w**0*numpy.array([ c(w*t), s(w*t),0.0]);
#         vv = r*w**1*numpy.array([-s(w*t), c(w*t),0.0]);
#         aa = r*w**2*numpy.array([-c(w*t),-s(w*t),0.0]);
#         jj = r*w**3*numpy.array([ s(w*t),-c(w*t),0.0]);
#         ss = r*w**4*numpy.array([ c(w*t), s(w*t),0.0]);

#         pp = pp + numpy.array([0.0,0.0,0.01])

#     else:

#         pp = numpy.array([0.0,0.0,0.01]);
#         vv = numpy.array([0.0,0.0,0.0 ]);
#         aa = numpy.array([0.0,0.0,0.0 ]);
#         jj = numpy.array([0.0,0.0,0.0 ]);
#         ss = numpy.array([0.0,0.0,0.0 ]);

#     return numpy.concatenate([pp,vv,aa,jj,ss])

def skew(x):
    out = numpy.zeros((3,3))
    out[0,1] = -x[2]
    out[0,2] =  x[1]
    out[1,2] = -x[0]
    out[1,0] =  x[2]
    out[2,0] = -x[1]
    out[2,1] =  x[0]
    return out

# testing skew matrix    
# print skew(numpy.array([1,2,3]))

def quaternion_to_rot(quaternion):

    q   = quaternion
    q_v = q[0:3] 
    q_n = q[3]
    qc  = numpy.concatenate([-q_v,[q_n]])

    R  = numpy.dot(q,qc)*numpy.identity(3) + 2*q_n*skew(q_v) + 2*numpy.outer(q_v,q_v)

    return R

class QuadController(object):

    # Default vehicle parameters for Asctec Firefly.
    kDefaultRotor0Angle  =  0.52359877559
    kDefaultRotor1Angle  =  1.57079632679
    kDefaultRotor2Angle  =  2.61799387799
    kDefaultRotor3Angle  = -2.61799387799
    kDefaultRotor4Angle  = -1.57079632679
    kDefaultRotor5Angle  = -0.52359877559
    kDefaultRotorAngle   = numpy.array([kDefaultRotor0Angle,kDefaultRotor1Angle,kDefaultRotor2Angle,kDefaultRotor3Angle,kDefaultRotor4Angle,kDefaultRotor5Angle])

    kDefaultRotorDirection = numpy.array([1.0,-1.0,1.0,-1.0,1.0,-1.0])

    # Default vehicle parameters for Asctec Firefly.
    kDefaultMass      = 1.56779
    kDefaultArmLength = 0.215
    kDefaultInertiaXx = 0.0347563
    kDefaultInertiaYy = 0.0458929   
    kDefaultInertiaZz = 0.0977
    kDefaultRotorForceConstant  = 8.54858e-6
    kDefaultRotorMomentConstant = 1.6e-2

    K = numpy.diag([kDefaultArmLength*kDefaultRotorForceConstant,          \
                    kDefaultArmLength*kDefaultRotorForceConstant,          \
                    kDefaultRotorMomentConstant*kDefaultRotorForceConstant,\
                    kDefaultRotorForceConstant])

    K_inv = numpy.diag([1.0/(kDefaultArmLength*kDefaultRotorForceConstant),          \
                        1.0/(kDefaultArmLength*kDefaultRotorForceConstant),          \
                        1.0/(kDefaultRotorMomentConstant*kDefaultRotorForceConstant),\
                        1.0/(kDefaultRotorForceConstant)])

    A = numpy.zeros([4,6])
    for i in range(6):
        A[0,i] =  numpy.sin(kDefaultRotorAngle[i])
        A[1,i] = -numpy.cos(kDefaultRotorAngle[i])
        A[2,i] = -kDefaultRotorDirection[i]
        A[3,i] =  1.0

    A_inv = numpy.dot(A,A.T)
    A_inv = numpy.linalg.inv(A_inv)
    A_inv = numpy.dot(A.T,A_inv)

    I     = numpy.diag([kDefaultInertiaXx,kDefaultInertiaYy,kDefaultInertiaZz,kDefaultMass])
    I_inv = numpy.diag([1.0/(kDefaultInertiaXx),1.0/(kDefaultInertiaYy),1.0/(kDefaultInertiaZz),1.0/(kDefaultMass)])
    J     = numpy.diag([kDefaultInertiaXx,kDefaultInertiaYy,kDefaultInertiaZz])

    matrix_motor_speeds = numpy.dot(A_inv,K_inv)

    # this is the same matrix as above
    # matrix_motor_speeds = numpy.dot((numpy.dot(K,A)).T, numpy.linalg.inv(numpy.dot(numpy.dot(K,A),(numpy.dot(K,A)).T) ))    

    # VT_Ctrll = Vector_Thrust_Controller()
    Load_Ctrll = Load_Transport_Controller()

    # I will be saving this as memory in the node
    load_odometry_position = numpy.array([0.0,0.0,0.0])
    load_odometry_velocity = numpy.array([0.0,0.0,0.0])

    # attitude_gain     = 3
    # angular_rate_gain = 0.52
    attitude_gain     = 5.0
    angular_rate_gain = numpy.sqrt(2*attitude_gain)   

    attitude_gain_z     = 0.15
    angular_rate_gain_z = 0.18        

    # acceleration due to gravity (m/s^2)
    g  = 9.81

    # transported mass (kg)
    M  = 0.100

    # mass of vehicles (kg)
    m = kDefaultMass

    # cable lengths (m)
    L = 0.6

    # intiialization should be done in another way,
    # but median will take care of minimizing effects
    LoadVelocityEstimator = Velocity_Filter(3,numpy.zeros(3),0.0)

    QuadVelocityEstimator = Velocity_Filter(3,numpy.zeros(3),0.0)

    R = numpy.identity(3)

    """docstring for QuadController"""
    # def __init__(self, arg):
    #     super(QuadController, self).__init__()
    #     self.arg = arg

    def compute_cmd(self,data_odometry):

        start_time = time.time()

        #---------------------------------------------------------------#

        # current_time  = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
        t_0dt         = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
        stated        = traj_des(t_0dt) 

        #---------------------------------------------------------------#

        quaternion_quad = numpy.array([data_odometry.pose.pose.orientation.x,\
                                       data_odometry.pose.pose.orientation.y,\
                                       data_odometry.pose.pose.orientation.z,\
                                       data_odometry.pose.pose.orientation.w])    

        R = quaternion_to_rot(quaternion_quad)        
        self.R = R

        #---------------------------------------------------------------#

        position_quad = numpy.array([data_odometry.pose.pose.position.x,\
                                     data_odometry.pose.pose.position.y,\
                                     data_odometry.pose.pose.position.z])

        velocity_quad_body = numpy.array([data_odometry.twist.twist.linear.x,\
                                          data_odometry.twist.twist.linear.y,\
                                          data_odometry.twist.twist.linear.z])

        velocity_quad = numpy.dot(R,velocity_quad_body)
        

        # current_time  = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
        # print current_time
        # print self.QuadVelocityEstimator.out(position_quad,current_time)
        # print velocity_quad

        #---------------------------------------------------------------#

        omega_body =  numpy.array([data_odometry.twist.twist.angular.x,\
                                   data_odometry.twist.twist.angular.y,\
                                   data_odometry.twist.twist.angular.z])

        omega = numpy.dot(R,omega_body)

        # print omega_body
        # print omega

        position_load = self.load_odometry_position
        velocity_load = numpy.dot(R,self.load_odometry_velocity)

        state  = numpy.concatenate([position_load, \
                                    velocity_load, \
                                    position_quad, \
                                    velocity_quad ])
        #---------------------------------------------------------------#

        U,U_dot  = self.Load_Ctrll.output2(state,stated)


        if numpy.linalg.norm(self.load_odometry_position - stated[0:3]) < 100.0:        
            U_0dot = U
            U_1dot = U_dot
            U_2dot = numpy.zeros(3) 

            delay  = 0.01
            delay  = 0.0
            U_0dot = U + delay*U_dot

        # U_0dot = U
        # U_1dot = numpy.zeros(3)
        # U_2dot = numpy.zeros(3)
        #
        # if numpy.linalg.norm(self.load_odometry_position - stated[0:3]) < 100.0:        
        #     U_t_0dt      = U
        #     state_t_0dt  = state
        #     delta_t      = 0.001
            
        #     t_1dt        = t_0dt + delta_t
        #     stated_t_1dt = traj_des(t_1dt)
        #     state_t_1dt  = state_t_0dt + self.sys_dynamics(t_0dt,state_t_0dt,U_t_0dt)*delta_t
        #     U_t_1dt      = self.Load_Ctrll.output(state_t_1dt,stated_t_1dt)
            
        #     t_2dt        = t_1dt + delta_t
        #     stated_t_2dt = traj_des(t_2dt)
        #     state_t_2dt  = state_t_1dt + self.sys_dynamics(t_1dt,state_t_1dt,U_t_1dt)*delta_t      
        #     U_t_2dt      = self.Load_Ctrll.output(state_t_2dt,stated_t_2dt)

        #     U_0dot = U
        #     U_1dot  = (U_t_1dt - U_t_0dt)/delta_t
        #     U_2dot  = (U_t_2dt - 2.0*U_t_1dt + U_t_0dt)/(delta_t**2) 


        #---------------------------------------------------------------#

        e3          = numpy.array([0.0,0.0,1.0])
        unit_vector = numpy.dot(R,e3)
        omega_3     = omega - unit_vector*numpy.dot(unit_vector,omega)

        # finding unit vector associated to desired force vector
        # note that U_0dot cannot be zero vector
        unit_vector_des,omega_des,omega_des_dot = self.unit_vector_from_vector(U_0dot,U_1dot,U_2dot)

        # print 'angle: ' + str(numpy.arccos((numpy.dot(unit_vector,unit_vector_des)))*180.0/3.142)

        #---------------------------------------------------------------#

        Tau = self.torque_unit_vector(unit_vector,omega_3,unit_vector_des,omega_des,omega_des_dot)

        tau_3 = -numpy.dot(omega_body,e3)

        distance          = 0.0
        tension_cable     = numpy.zeros(3)
        unit_vector_cable = position_quad - self.load_odometry_position
        # print numpy.linalg.norm(unit_vector_cable)
        unit_vector_cable = unit_vector_cable/numpy.linalg.norm(unit_vector_cable)
        
        # Thrust = m*Thrust;
        # Torque = J*skew(e3)*(RQ'*tau - wQ*(e3'*wQ)) + skew(wQ)*J*wQ - J*e3*(e3'*wQ);        
        
        thrust      = numpy.dot(U,unit_vector_cable)/numpy.dot(unit_vector,unit_vector_cable)      
        torque_body = numpy.dot(skew(omega_body),numpy.dot(self.J,omega_body))                                       + \
                      numpy.dot(self.J,numpy.dot(skew(e3),numpy.dot(R.T,Tau) - omega_body*numpy.dot(omega_body,e3))) + \
                      numpy.dot(self.J,e3)*tau_3                                                                     + \
                      numpy.dot(R.T,numpy.dot(skew(unit_vector*distance),tension_cable*unit_vector_cable))

        #---------------------------------------------------------------#
        
        n = numpy.dot(self.matrix_motor_speeds,numpy.concatenate([torque_body,[thrust]]))
        # speeds cannot be negative; bound below by 0
        n = numpy.maximum(n,numpy.zeros(6))
        # forces proportional to speed squared
        n = numpy.sqrt(n)

        # creating actuators message
        actuators_message = Actuators()
        # this is just for testing
        # actuators_message.angular_velocities = numpy.array([100,100,100,100,100,100])
        # copy motor speeds into message previously created
        actuators_message.angular_velocities = n
        # just for debug pruposes
        # actuators_message.angular_velocities = numpy.array([200,200,200,200,200,200])
        # publish message
        self.pub_motor_speeds.publish(actuators_message)

        print("--- %s seconds CYCLE TIME ---" % (time.time() - start_time))
        
        return 

    def sys_dynamics(self,t,states , U):
        
        # U = Full actuation vehicles
        
        # acceleration due to gravity (m/s^2)
        g  = self.g

        # transported mass (kg)
        M  = self.M

        # mass of vehicles (kg)
        m = self.m

        # cable lengths (m)
        L = self.L

        # states

        # transported mass: position and velocity
        xM = states[0:3];
        vM = states[3:6];

        # vehicle: position and velocity
        x  = states[6:9];
        v  = states[9:12];

        n = (x - xM)/numpy.linalg.norm(x - xM);

        T = numpy.dot(U,n)*M/(m + M) + numpy.dot(vM - v, vM - v)*m*M/(m+M)*1.0/L;

        # third canonical basis vector
        e3 = numpy.array([0.0,0.0,1.0])

        
        # acceleration of vehicle
        vD = (U - T*n)/m - g*e3;
          
        # acceleration of transported mass
        vMD = T*n/M - g*e3;
          
          
        # collecting derivatives
        derivatives = numpy.concatenate([vM,vMD,v,vD])
          
        return derivatives


    def torque_unit_vector(self,n,w,n_star,w_star,w_star_dot):

        ew     = numpy.dot(skew(n),w - w_star)
        torque = numpy.dot(skew(n),-w_star_dot - self.attitude_gain*numpy.dot(skew(n),n_star) - numpy.dot(skew(n),w_star)*numpy.dot(n,w_star)) +\
                 self.angular_rate_gain*ew                

        return torque 

    def unit_vector_from_vector(self,U_0dot,U_1dot,U_2dot):

        U_0dot_norm = U_0dot/numpy.linalg.norm(U_0dot)
        U_1dot_norm = U_1dot/numpy.linalg.norm(U_0dot)
        U_2dot_norm = U_2dot/numpy.linalg.norm(U_0dot)

        unit_vector_des = U_0dot_norm
        omega_des       = numpy.dot(skew(unit_vector_des),U_1dot_norm)
        omega_des_dot   = numpy.dot(skew(unit_vector_des),U_2dot_norm - 2.0*U_1dot_norm*numpy.dot(U_1dot_norm,U_0dot_norm))

        return (unit_vector_des,omega_des,omega_des_dot)

    def update_load_odometry(self,data_odometry):

        self.load_odometry_position = numpy.array([data_odometry.pose.pose.position.x,\
                                                   data_odometry.pose.pose.position.y,\
                                                   data_odometry.pose.pose.position.z])

        self.load_odometry_velocity = numpy.array([data_odometry.twist.twist.linear.x,\
                                                   data_odometry.twist.twist.linear.y,\
                                                   data_odometry.twist.twist.linear.z])

        # current_time  = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
        # print self.LoadVelocityEstimator.out(self.load_odometry_position,current_time)
        # print numpy.dot(self.R,self.load_odometry_velocity)

        return 

    def bla(self,data_odometry):


        x = numpy.array([data_odometry.pose.pose.position.x,\
                         data_odometry.pose.pose.position.y,\
                         data_odometry.pose.pose.position.z,\
                         data_odometry.twist.twist.linear.x,\
                         data_odometry.twist.twist.linear.y,\
                         data_odometry.twist.twist.linear.z])

        v = numpy.array([data_odometry.twist.twist.linear.x,\
                         data_odometry.twist.twist.linear.y,\
                         data_odometry.twist.twist.linear.z])


        quaternion = numpy.array([data_odometry.pose.pose.orientation.x,\
                                  data_odometry.pose.pose.orientation.y,\
                                  data_odometry.pose.pose.orientation.z,\
                                  data_odometry.pose.pose.orientation.w])    

        omega =  numpy.array([data_odometry.twist.twist.angular.x,\
                              data_odometry.twist.twist.angular.y,\
                              data_odometry.twist.twist.angular.z])        

        print "omega" + str(omega)
        print "v" + str(v)

    def controller(self):

        # node will be named quad_control (see rqt_graph)
        rospy.init_node('quad_control', anonymous=True)

        self.t0 = time.time()

        # publisher: command firefly motor speeds 
        self.pub_motor_speeds = rospy.Publisher('/firefly/command/motor_speed', Actuators, queue_size=10)

        # subscriber: to odometry
        # self.sub_odometry = rospy.Subscriber("/firefly/odometry_sensor1/odometry", Odometry, self.bla)
        self.sub_odometry = rospy.Subscriber("/firefly/ground_truth/odometry", Odometry, self.compute_cmd) 

        # subscriber: to odometry
        # self.sub_odometry = rospy.Subscriber("/firefly/odometry_sensor1/odometry", Odometry, self.compute_cmd)
        self.sub_odometry_load = rospy.Subscriber("/firefly/ground_truth/odometry_load", Odometry, self.update_load_odometry) 



        # spin() simply keeps python from exiting until this node is stopped
        rospy.spin()    


if __name__ == '__main__':
    a_controller = QuadController()

    a_controller.controller()


