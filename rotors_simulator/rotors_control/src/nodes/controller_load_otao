#!/usr/bin/env python
# this line is just used to define the type of document

import rospy

import numpy

# node will publish motor speeds
from mav_msgs.msg import Actuators

#node will subscribe to odometry measurements
from nav_msgs.msg import Odometry

from VectorThrustController import Vector_Thrust_Controller

import LoadTransportController3

# import LoadTransportController


# Path hack.
import sys; import os
sys.path.insert(0, os.path.abspath('./src'))
print(sys.path)
print("\n\n")
# from Vector_Thrust_Controller.Vector_Thrust_Controller_Double_Integrator_and_Toque_Backstepping.VectorThrustController import Vector_Thrust_Controller
# export PYTHONPATH=~/SML_CODE/src/Python:$PYTHONPATH
# print($PYTHONPATH)
from Python.Load_Transport.Without_Disturbance.LoadTransportController import Load_Transport_Controller


from utility_functions import skew,unskew,quaternion_to_rot,Velocity_Filter,quaternion_from_unit_vector,bound

import firefly_parameters

import desired_trajectory

# to work with directories relative to ROS packages
from rospkg import RosPack

import time

class QuadController(object):

    SaveDataFlag = True

    matrix_motor_speeds = firefly_parameters.matrix_motor_speeds

    quad_inertia_matrix = firefly_parameters.J

    # this is the same matrix as above
    # matrix_motor_speeds = numpy.dot((numpy.dot(K,A)).T, numpy.linalg.inv(numpy.dot(numpy.dot(K,A),(numpy.dot(K,A)).T) ))    

    # VT_Ctrll = Vector_Thrust_Controller()
    # Load_Ctrll = LoadTransportController3.Load_Transport_Controller()
    # Load_Ctrll = LoadTransportController.Load_Transport_Controller()
    Load_Ctrll = Load_Transport_Controller()


    # I will be saving this as memory in the node
    load_odometry_position = numpy.array([0.0,0.0,0.0])
    load_odometry_velocity = numpy.array([0.0,0.0,0.0])

    attitude_gain     = 3
    angular_rate_gain = 0.52
    # attitude_gain     = 5.0
    # angular_rate_gain = numpy.sqrt(2*attitude_gain)   

    attitude_gain_z     = 0.15
    angular_rate_gain_z = 0.18

    # acceleration due to gravity (m/s^2)
    gravity      = firefly_parameters.gravity
    # transported mass (kg)
    load_mass    = firefly_parameters.load_mass
    # mass of vehicles (kg)
    quad_mass    = firefly_parameters.kDefaultMass
    # cable lengths (m)
    cable_length = firefly_parameters.cable_length


    # this is not really necessary, just to check data from gazebo is correct
    # intiialization should be done in another way,
    # but median will take care of minimizing effects
    LoadVelocityEstimator = Velocity_Filter(3,numpy.zeros(3),0.0)
    QuadVelocityEstimator = Velocity_Filter(3,numpy.zeros(3),0.0)

    # not necessary
    # rotation matrix of quad
    # R = numpy.identity(3)

    """docstring for QuadController"""
    # def __init__(self, arg):
    #     super(QuadController, self).__init__()
    #     self.arg = arg

    def compute_cmd(self,data_odometry):

        #---------------------------------------------------------------#

        start_time = time.time()

        # current_time  = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
        # t_0dt         = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
        try:
            t_0dt = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9 - self.t0
        except:
            self.t0 = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
            t_0dt   = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9 - self.t0

        #---------------------------------------------------------------#
        stated        = desired_trajectory.output(t_0dt) 

        #---------------------------------------------------------------#

        quaternion_quad = numpy.array([data_odometry.pose.pose.orientation.x,\
                                       data_odometry.pose.pose.orientation.y,\
                                       data_odometry.pose.pose.orientation.z,\
                                       data_odometry.pose.pose.orientation.w])    

        R = quaternion_to_rot(quaternion_quad)        
        # not necessary
        # self.R = R

        #---------------------------------------------------------------#

        position_quad = numpy.array([data_odometry.pose.pose.position.x,\
                                     data_odometry.pose.pose.position.y,\
                                     data_odometry.pose.pose.position.z])

        velocity_quad_body = numpy.array([data_odometry.twist.twist.linear.x,\
                                          data_odometry.twist.twist.linear.y,\
                                          data_odometry.twist.twist.linear.z])

        velocity_quad = numpy.dot(R,velocity_quad_body)
        

        # current_time  = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
        # print current_time
        # print self.QuadVelocityEstimator.out(position_quad,current_time)
        # print velocity_quad

        #---------------------------------------------------------------#

        omega_body =  numpy.array([data_odometry.twist.twist.angular.x,\
                                   data_odometry.twist.twist.angular.y,\
                                   data_odometry.twist.twist.angular.z])

        omega = numpy.dot(R,omega_body)

        # print omega_body
        # print omega

        position_load = self.load_odometry_position
        velocity_load = self.load_odometry_velocity
        # velocity_load = numpy.dot(R,self.load_odometry_velocity)

        state  = numpy.concatenate([position_load, \
                                    velocity_load, \
                                    position_quad, \
                                    velocity_quad ])
        #---------------------------------------------------------------#

        # U,U_dot,V,VD  = self.Load_Ctrll.output(state,stated)
        U  = self.Load_Ctrll.output(state,stated)
        U_dot = numpy.zeros(3)

        if numpy.linalg.norm(self.load_odometry_position - stated[0:3]) < 0.0:        
            U_0dot = U
            U_1dot = U_dot
            U_2dot = numpy.zeros(3) 
        else:
            U_0dot = U
            U_1dot = numpy.zeros(3)
            U_2dot = numpy.zeros(3) 

        delay  = 0.01
        # delay  = 0.0
        U_0dot = U + delay*U_dot

        #---------------------------------------------------------------#

        e3          = numpy.array([0.0,0.0,1.0])
        unit_vector = numpy.dot(R,e3)
        omega_3     = omega - unit_vector*numpy.dot(unit_vector,omega)

        # finding unit vector associated to desired force vector
        # note that U_0dot cannot be zero vector
        unit_vector_des,omega_des,omega_des_dot = self.unit_vector_from_vector(U_0dot,U_1dot,U_2dot)

        # print 'angle: ' + str(numpy.arccos((numpy.dot(unit_vector,unit_vector_des)))*180.0/3.142)

        #---------------------------------------------------------------#

        Tau = self.torque_unit_vector(unit_vector,omega_3,unit_vector_des,omega_des,omega_des_dot)

        tau_3 = -numpy.dot(omega_body,e3)

        distance          = 0.0
        tension_cable     = numpy.zeros(3)
        unit_vector_cable = position_quad - self.load_odometry_position
        # print numpy.linalg.norm(unit_vector_cable)
        unit_vector_cable = unit_vector_cable/numpy.linalg.norm(unit_vector_cable)
        
        # Thrust = m*Thrust;
        # Torque = quad_inertia_matrix*skew(e3)*(RQ'*tau - wQ*(e3'*wQ)) + skew(wQ)*quad_inertia_matrix*wQ - quad_inertia_matrix*e3*(e3'*wQ);        
        
        thrust      = numpy.dot(U,unit_vector_cable)/numpy.dot(unit_vector,unit_vector_cable)      
        # torque_body = numpy.dot(skew(omega_body),numpy.dot(self.quad_inertia_matrix,omega_body))                                       + \
        #               numpy.dot(self.quad_inertia_matrix,numpy.dot(skew(e3),numpy.dot(R.T,Tau) - omega_body*numpy.dot(omega_body,e3))) + \
        #               numpy.dot(self.quad_inertia_matrix,e3)*tau_3                                                                     + \
        #               numpy.dot(R.T,numpy.dot(skew(unit_vector*distance),tension_cable*unit_vector_cable))

        torque_body = self.compute_torque(U_0dot,U_1dot,R,omega_body)
        # torque_body = self.compute_torque(U_0dot,numpy.zeros(3),R,omega_body)
        #---------------------------------------------------------------#
        
        n = numpy.dot(self.matrix_motor_speeds,numpy.concatenate([torque_body,[thrust]]))
        # speeds cannot be negative; bound below by 0
        n = numpy.maximum(n,numpy.zeros(6)) 
        # forces proportional to speed squared
        n = numpy.sqrt(n)

        # creating actuators message
        actuators_message = Actuators()
        # this is just for testing
        # actuators_message.angular_velocities = numpy.array([100,100,100,100,100,100])
        # copy motor speeds into message previously created
        actuators_message.angular_velocities = n
        # just for debug pruposes
        # actuators_message.angular_velocities = numpy.array([200,200,200,200,200,200])
        # publish message
        self.pub_motor_speeds.publish(actuators_message)

        if self.SaveDataFlag == True:
            # if we want to save data
            current_time = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
            numpy.savetxt(self.file_handle, [numpy.concatenate([[current_time],state,stated,quaternion_quad,omega,U_0dot])],delimiter=' ')

        print("--- %s seconds CYCLE TIME ---" % (time.time() - start_time))

        return 

    def sys_dynamics(self,t,states , U):
        
        # U = Full actuation vehicles
        
        # acceleration due to gravity (m/s^2)
        g  = self.gravity
        # transported mass (kg)
        M  = self.load_mass
        # mass of vehicles (kg)
        m = self.quad_mass
        # cable lengths (m)
        L = self.cable_length

        # states

        # transported mass: position and velocity
        xM = states[0:3];
        vM = states[3:6];

        # vehicle: position and velocity
        x  = states[6:9];
        v  = states[9:12];

        n = (x - xM)/numpy.linalg.norm(x - xM);

        T = numpy.dot(U,n)*M/(m + M) + numpy.dot(vM - v, vM - v)*m*M/(m+M)*1.0/L;

        # third canonical basis vector
        e3 = numpy.array([0.0,0.0,1.0])

        
        # acceleration of vehicle
        vD = (U - T*n)/m - g*e3;
          
        # acceleration of transported mass
        vMD = T*n/M - g*e3;
                  
        # collecting derivatives
        derivatives = numpy.concatenate([vM,vMD,v,vD])
          
        return derivatives


    def torque_unit_vector(self,n,w,n_star,w_star,w_star_dot):

        ew     = numpy.dot(skew(n),w - w_star)
        torque = numpy.dot(skew(n),-w_star_dot - self.attitude_gain*numpy.dot(skew(n),n_star) - numpy.dot(skew(n),w_star)*numpy.dot(n,w_star)) +\
                 self.angular_rate_gain*ew                

        return torque 


    def unit_vector_from_vector(self,U_0dot,U_1dot,U_2dot):

        U_0dot_norm = U_0dot/numpy.linalg.norm(U_0dot)
        U_1dot_norm = U_1dot/numpy.linalg.norm(U_0dot)
        U_2dot_norm = U_2dot/numpy.linalg.norm(U_0dot)

        unit_vector_des = U_0dot_norm
        omega_des       = numpy.dot(skew(unit_vector_des),U_1dot_norm)
        omega_des_dot   = numpy.dot(skew(unit_vector_des),U_2dot_norm - 2.0*U_1dot_norm*numpy.dot(U_1dot_norm,U_0dot_norm))

        return (unit_vector_des,omega_des,omega_des_dot)


    def update_load_odometry(self,data_odometry):

        self.load_odometry_position = numpy.array([data_odometry.pose.pose.position.x,\
                                                   data_odometry.pose.pose.position.y,\
                                                   data_odometry.pose.pose.position.z])

        # self.load_odometry_velocity = numpy.array([data_odometry.twist.twist.linear.x,\
        #                                            data_odometry.twist.twist.linear.y,\
        #                                            data_odometry.twist.twist.linear.z])

        current_time  = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
        self.load_odometry_velocity = self.LoadVelocityEstimator.out(self.load_odometry_position,current_time)

        # current_time  = data_odometry.header.stamp.secs + data_odometry.header.stamp.nsecs/1e9
        # print self.LoadVelocityEstimator.out(self.load_odometry_position,current_time)
        # print numpy.dot(self.R,self.load_odometry_velocity)

        return 

    def handle_Save_Data(self):
            
        # namespace, e.g. /Iris1/
        ns = rospy.get_namespace()
        # remove / symbol to namespace: e.g, we get ns= Iris1
        ns = ns.replace("/", "")

        # string for time: used for generating files
        tt = str(int(rospy.get_time()))

        # determine ROS workspace directory
        rp = RosPack()
        package_path = rp.get_path('quad_control')
        self.file_handle  = file(package_path+'/../../'+ns+'_data_'+tt+'.txt', 'w')

        return

    def compute_torque(self,desired_acceleration,desired_acceleration_dot,rotation_matrix,angular_velocity_body):

        r3  = desired_acceleration
        r3  = r3/numpy.linalg.norm(r3)
        psi = numpy.arctan2(bound(rotation_matrix[1,0],1,-1),bound(rotation_matrix[0,0],1,-1))
        r1  = numpy.array([numpy.cos(psi),numpy.sin(psi),0.0])
        r1  = numpy.dot(numpy.identity(3) - numpy.outer(r3,r3),r1)
        r1  = r1/numpy.linalg.norm(r1)
        r2  = numpy.dot(skew(r3),r1)        

        R_desired = numpy.column_stack((r1,r2,r3))

        R_error = numpy.dot(numpy.transpose(R_desired),rotation_matrix) 
        
        # angular_rate_des   = numpy.zeros(3)
        # angular_rate_error = angular_velocity_body - numpy.dot(numpy.transpose(rotation_matrix), numpy.dot(R_desired, angular_rate_des))
        angular_rate_des   = numpy.dot(skew(r3),desired_acceleration_dot/numpy.linalg.norm(desired_acceleration))
        angular_rate_error = angular_velocity_body - numpy.dot(numpy.transpose(rotation_matrix), angular_rate_des)

        angular_acceleration = -self.attitude_gain*unskew(1.0/2.0*(R_error - numpy.transpose(R_error))) \
                               -self.angular_rate_gain*angular_rate_error +\
                               numpy.dot(skew(angular_velocity_body),numpy.dot(self.quad_inertia_matrix,angular_velocity_body))

        return angular_acceleration

    def controller(self):

        # node will be named quad_control (see rqt_graph)
        rospy.init_node('quad_control', anonymous=True)

        # initialize time when output is called for first time
        # self.t0 = time.time()

        # publisher: command firefly motor speeds 
        self.pub_motor_speeds = rospy.Publisher('/firefly/command/motor_speed', Actuators, queue_size=10)

        # subscriber: to odometry
        # self.sub_odometry = rospy.Subscriber("/firefly/odometry_sensor1/odometry", Odometry, self.compute_cmd)
        self.sub_odometry = rospy.Subscriber("/firefly/ground_truth/odometry", Odometry, self.compute_cmd) 

        # subscriber: to odometry
        # self.sub_odometry = rospy.Subscriber("/firefly/odometry_sensor1/odometry", Odometry, self.compute_cmd)
        self.sub_odometry_load = rospy.Subscriber("/firefly/ground_truth/odometry_load", Odometry, self.update_load_odometry) 

        if self.SaveDataFlag == True:
            self.handle_Save_Data()

        # spin() simply keeps python from exiting until this node is stopped
        rospy.spin()    


if __name__ == '__main__':
    a_controller = QuadController()

    a_controller.controller()


