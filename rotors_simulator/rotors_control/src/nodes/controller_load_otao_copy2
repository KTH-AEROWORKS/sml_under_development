#!/usr/bin/env python
# this line is just used to define the type of document

import rospy

import numpy

# node will publish motor speeds
from mav_msgs.msg import Actuators

#node will subscribe to odometry measurements
from nav_msgs.msg import Odometry


from VectorThrustController import Vector_Thrust_Controller

from LoadTransportController import Load_Transport_Controller

# Desired trajectory for LOAD
def traj_des(t):
#    p = numpy.array([0.6,0.0,0.0]);
#    v = numpy.array([0.0,0.0,0.0]);
#    a = numpy.array([0.0,0.0,0.0]);
#    j = numpy.array([0.0,0.0,0.0]);
#    s = numpy.array([0.0,0.0,0.0]);

    from numpy import cos as c
    from numpy import sin as s

    r = 0.0
    w = 0.5
    
    p = r*w**0*numpy.array([ c(w*t), s(w*t),0.0]);
    v = r*w**1*numpy.array([-s(w*t), c(w*t),0.0]);
    a = r*w**2*numpy.array([-c(w*t),-s(w*t),0.0]);
    j = r*w**3*numpy.array([ s(w*t),-c(w*t),0.0]);
    s = r*w**4*numpy.array([ c(w*t), s(w*t),0.0]);

    p = p + numpy.array([0.0,0.0,0.1])

    return numpy.concatenate([p,v,a,j,s])

def skew(x):
    out = numpy.zeros((3,3))
    out[0,1] = -x[2]
    out[0,2] =  x[1]
    out[1,2] = -x[0]
    out[1,0] =  x[2]
    out[2,0] = -x[1]
    out[2,1] =  x[0]
    return out

def quaternion_to_rot(quaternion):

    q   = quaternion
    q_v = q[0:3] 
    q_n = q[3]
    qc  = numpy.concatenate([-q_v,[q_n]])

    R  = numpy.dot(q,qc)*numpy.identity(3) + 2*q_n*skew(q_v) + 2*numpy.outer(q_v,q_v)

    return R

class QuadController(object):

    # Default vehicle parameters for Asctec Firefly.
    kDefaultRotor0Angle  = 0.52359877559
    kDefaultRotor1Angle  = 1.57079632679
    kDefaultRotor2Angle  = 2.61799387799
    kDefaultRotor3Angle  = -2.61799387799
    kDefaultRotor4Angle  = -1.57079632679
    kDefaultRotor5Angle  = -0.52359877559
    kDefaultRotorAngle   = numpy.array([kDefaultRotor0Angle,kDefaultRotor1Angle,kDefaultRotor2Angle,kDefaultRotor3Angle,kDefaultRotor4Angle,kDefaultRotor5Angle])

    kDefaultRotorDirection = numpy.array([1.0,-1.0,1.0,-1.0,1.0,-1.0])


    # Default vehicle parameters for Asctec Firefly.
    kDefaultMass      = 1.56779
    kDefaultArmLength = 0.215
    kDefaultInertiaXx = 0.0347563
    kDefaultInertiaYy = 0.0458929   
    kDefaultInertiaZz = 0.0977
    kDefaultRotorForceConstant  = 8.54858e-6
    kDefaultRotorMomentConstant = 1.6e-2

    K = numpy.diag([kDefaultArmLength*kDefaultRotorForceConstant,          \
                    kDefaultArmLength*kDefaultRotorForceConstant,          \
                    kDefaultRotorMomentConstant*kDefaultRotorForceConstant,\
                    kDefaultRotorForceConstant])

    K_inv = numpy.diag([1.0/(kDefaultArmLength*kDefaultRotorForceConstant),          \
                        1.0/(kDefaultArmLength*kDefaultRotorForceConstant),          \
                        1.0/(kDefaultRotorMomentConstant*kDefaultRotorForceConstant),\
                        1.0/(kDefaultRotorForceConstant)])

    A = numpy.zeros([4,6])
    for i in range(6):
        A[0,i] =  numpy.sin(kDefaultRotorAngle[i])
        A[1,i] = -numpy.cos(kDefaultRotorAngle[i])
        A[2,i] = -kDefaultRotorDirection[i]
        A[3,i] =  1.0

    A_inv = numpy.dot(A,A.T)
    A_inv = numpy.linalg.inv(A_inv)
    A_inv = numpy.dot(A.T,A_inv)

    I     = numpy.diag([kDefaultInertiaXx,kDefaultInertiaYy,kDefaultInertiaZz,kDefaultMass])
    I_inv = numpy.diag([1.0/(kDefaultInertiaXx),1.0/(kDefaultInertiaYy),1.0/(kDefaultInertiaZz),1.0/(kDefaultMass)])

    J     = numpy.diag([kDefaultInertiaXx,kDefaultInertiaYy,kDefaultInertiaZz])

    matrix_motor_speeds = numpy.dot(A_inv,K_inv)

    # this is the same matrix as above
    # matrix_motor_speeds = numpy.dot((numpy.dot(K,A)).T, numpy.linalg.inv(numpy.dot(numpy.dot(K,A),(numpy.dot(K,A)).T) ))    

    # VT_Ctrll = Vector_Thrust_Controller()
    Load_Ctrll = Load_Transport_Controller()


    load_odometry_position = numpy.array([0.0,0.0,0.0])
    load_odometry_velocity = numpy.array([0.0,0.0,0.0])


    attitude_gain     = 10*3
    angular_rate_gain = 10*0.52

    attitude_gain_z     = 0.15
    angular_rate_gain_z = 0.18        

    """docstring for QuadController"""
    # def __init__(self, arg):
    #     super(QuadController, self).__init__()
    #     self.arg = arg

    def compute_cmd(self,data_odometry):

        actuators_message = Actuators()

        stated = traj_des(rospy.get_time() - self.t0) 

        x = numpy.array([data_odometry.pose.pose.position.x,\
                         data_odometry.pose.pose.position.y,\
                         data_odometry.pose.pose.position.z,\
                         data_odometry.twist.twist.linear.x,\
                         data_odometry.twist.twist.linear.y,\
                         data_odometry.twist.twist.linear.z])

        state  = numpy.concatenate([self.load_odometry_position, self.load_odometry_velocity, x])
        U      = self.Load_Ctrll.output(state,stated)
        rospy.logwarn(state)
        rospy.logwarn(U)


        quaternion = numpy.array([data_odometry.pose.pose.orientation.x,\
                                  data_odometry.pose.pose.orientation.y,\
                                  data_odometry.pose.pose.orientation.z,\
                                  data_odometry.pose.pose.orientation.w])    

        omega =  numpy.array([data_odometry.twist.twist.angular.x,\
                              data_odometry.twist.twist.angular.y,\
                              data_odometry.twist.twist.angular.z])

        R = quaternion_to_rot(quaternion)

        omega_body = numpy.dot(R.T,omega)



        e3          = numpy.array([0.0,0.0,1.0])
        unit_vector = numpy.dot(R,e3)
        omega_3     = omega - unit_vector*numpy.dot(unit_vector,omega)


        unit_vector_des = U/numpy.linalg.norm(U)
        w_des           = numpy.zeros(3)
        w_des_dot       = numpy.zeros(3)
        Tau = self.torque_unit_vector(unit_vector,omega_3,unit_vector_des,w_des,w_des_dot)

        tau_3 = 0.0
        thrust      = numpy.dot(U,unit_vector)
        # no need for numpy.dot(skew(omega_body),numpy.dot(self.J,omega_body)) + \ this time since it is designed for inner loop
        torque_body = numpy.dot(skew(omega_body),numpy.dot(self.J,omega_body)) + \
                      numpy.dot(self.J,numpy.dot(skew(e3),numpy.dot(R.T,Tau) - omega_body*numpy.dot(omega_body,e3))) + \
                      numpy.dot(self.J,e3)*tau_3


        n = numpy.dot(self.matrix_motor_speeds,numpy.concatenate([torque_body,[thrust]]))
        n = numpy.sqrt(n)
        actuators_message.angular_velocities = n

        #actuators_message.angular_velocities = numpy.array([100,100,100,100,100,100])

        self.pub_motor_speeds.publish(actuators_message)

        return 

    def torque_unit_vector(self,n,w,n_star,w_star,w_star_dot):

        # torque = w_star_dot                                   + \
        #          self.attitude_gain*numpy.dot(skew(n),n_star) - \
        #          self.angular_rate_gain*(w - w_star)

        ew   = numpy.dot(skew(n),w - w_star)
        torque  = numpy.dot(skew(n),-w_star_dot - self.attitude_gain*numpy.dot(skew(n),n_star) - numpy.dot(skew(n),w_star)*numpy.dot(n,w_star)) + self.angular_rate_gain*ew                

        return torque 

    def update_load_odometry(self,data_odometry):

        self.load_odometry_position = numpy.array([data_odometry.pose.pose.position.x,\
                                                   data_odometry.pose.pose.position.y,\
                                                   data_odometry.pose.pose.position.z])

        self.load_odometry_velocity = numpy.array([data_odometry.twist.twist.linear.x,\
                                                   data_odometry.twist.twist.linear.y,\
                                                   data_odometry.twist.twist.linear.z])

        return 

    def controller(self):

        # node will be named quad_control (see rqt_graph)
        rospy.init_node('quad_control', anonymous=True)

        self.t0 = rospy.get_time()

        # publisher: command firefly motor speeds 
        self.pub_motor_speeds = rospy.Publisher('/firefly/command/motor_speed', Actuators, queue_size=10)

        # subscriber: to odometry
        # self.sub_odometry = rospy.Subscriber("/firefly/odometry_sensor1/odometry", Odometry, self.compute_cmd)
        self.sub_odometry = rospy.Subscriber("/firefly/ground_truth/odometry", Odometry, self.compute_cmd) 

        # subscriber: to odometry
        # self.sub_odometry = rospy.Subscriber("/firefly/odometry_sensor1/odometry", Odometry, self.compute_cmd)
        self.sub_odometry_load = rospy.Subscriber("/firefly/ground_truth/odometry_load", Odometry, self.update_load_odometry) 

        # spin() simply keeps python from exiting until this node is stopped
        rospy.spin()    


if __name__ == '__main__':
    a_controller = QuadController()

    a_controller.controller()


